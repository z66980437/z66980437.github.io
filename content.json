{"meta":{"title":"wildpigger-技术专栏","subtitle":"人生苦短，我用python","description":null,"author":"wildpigger","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"My New Post","slug":"My-New-Post","date":"2018-11-19T09:25:13.000Z","updated":"2018-11-19T09:25:13.125Z","comments":true,"path":"2018/11/19/My-New-Post/","link":"","permalink":"http://yoursite.com/2018/11/19/My-New-Post/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"git_install_use","date":"2018-11-19T07:49:35.316Z","updated":"2018-11-19T07:49:35.316Z","comments":true,"path":"2018/11/19/git_install_use/","link":"","permalink":"http://yoursite.com/2018/11/19/git_install_use/","excerpt":"","text":"git 安装与使用版本控制1990s - 锁定模式 CVS - Concurrent Version System VSS - Visual Source Safe 2000s - 合并模式 SVN - Subversion - 集中控制式 分布式版本控制系统 - BitKeeper2005年 - Git / Mercury Git - 分布式版本控制系统 - 没有中央服务器也可以实施版本控制 Linux系统安装Git方法一：yum -y install git方法二： 下载git源代码压缩文件wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.1.tar.xz 解压缩和解归档xz -d git-2.19.1.tar.xztar -xvf git-2.19.1.tar 安装git的网络依赖库yum -y install libcurl-devel curl libcurl 配置安装路径cd git-2.19.1./configure –prefix=/usr/local 构建和安装make &amp;&amp; make install 检查安装结果git –version Git的使用 创建git仓库 - .git - 两部分（缓存(暂存)区–仓库）git init 将代码纳入暂存区git add 文件名git add . 查看暂存区状态git statusgit rm –cached 文件名（从暂存区移除）git checkout – 文件名（将暂存区文件恢复到工作区） 配置身份标识git config –global user.name “…”git config –global user.email “…” 提交到本地仓库git commit -m ‘…’ 查看提交日志git loggit reflog - 看到未来的版本（曾经提交过又被撤回的版本） 回到历史版本git reset –hard HEAD^git reset –hard HEAD^^git reset –hard 版本的哈希摘要 –hard参数是为了保持工作区和历史版本的一致性 搭建Git服务器 使用网络上已有的代码托管平台 - github / gitee / coding 搭建自己个Git私服 - gitlab git clone - 从服务器上的项目克隆到本地 在本地实施版本控制 #如果Git联网操作报错通常是因为底层依赖库libcurl安装不正确解决方法如下 yum -y install curl libcurl libcurl-devel cd ~ cd git-2.19.1 make clean ./configure –profix=/usr/local make &amp;&amp; make install git push - 将本地版本推到服务器git pull - 将服务器版本拉到本地 在gitee上创建一个新的项目 克隆项目到本地 在本地修改某个文件或者新增一些文件 在本地实施版本控制 将本地项目推到服务器","categories":[],"tags":[]},{"title":"","slug":"linux_note2","date":"2018-11-19T07:49:23.038Z","updated":"2018-11-19T07:49:23.038Z","comments":true,"path":"2018/11/19/linux_note2/","link":"","permalink":"http://yoursite.com/2018/11/19/linux_note2/","excerpt":"","text":"##面向对象的四大支柱：抽象、封装、继承、多态 抽象 - 定义类的过程就是提取共性的抽象过程 数据抽象 - 找到对象的静态特征 - 属性 - 找名词 行为抽象 - 找到对象的动态特征 - 方法 - 找动词 封装：将数据和操作数据的方法从逻辑上组成一个整体 - 对象 隐藏实现细节 暴露简单的调用接口 继承 - 从已有的类创建新类的过程 提供继承信息的称之为父类 得到继承的称之为子类 多态 - 调用相同的方法做了不同的事情 - 同样的方法在运行时表现的不同行为 子类重写父类的方法 不同的子类给出不同的实现版本 ##类和类（对象和对象）之间的关系： is-a关系 继承关系 has-a关系 关联关系，又分为： 聚合关系 合成关系 use-a关系 依赖关系 ##定义枚举符号常量方法1234567from enum import Enumclass Suite(Enum): &quot;&quot;&quot;花色符号常量定义&quot;&quot;&quot; SPADE=0 HEART=1 CLUB=2 DIAMOND=3 调用方法：类名.属性名 查看具体值：类名.属性名.value ##面向对象的七个设计原则； 单一职责原则 一个类只做该做的事情，不做不该做的事情 开闭原则 依赖倒转原则 里氏替换原则 接口隔离原则 合成聚合复用原则 最少知识原则###–落地：GoF设计模式：23种经典场景 ##函数参数 ‘*’前面的参数称为位置参数（传参时不用指定参数名，按照位置传参即可） ‘*’后面你的参数称为命名关键字参数（传参时必须给出参数名和参数值）123def sort_cards(self, *, key=lambda card:(card.suite.value,card.face)): &quot;&quot;&quot;玩家整理手中的牌&quot;&quot;&quot; self.cards.sort(key=key)","categories":[],"tags":[]},{"title":"","slug":"hexo_build_blog","date":"2018-11-19T07:49:23.035Z","updated":"2018-11-19T07:49:23.035Z","comments":true,"path":"2018/11/19/hexo_build_blog/","link":"","permalink":"http://yoursite.com/2018/11/19/hexo_build_blog/","excerpt":"","text":"hexo搭建个人博客 安装Node.jsyum -y install nodejsnode –versionnpm –version 通过Node包管理工具npm安装hexonpm install hexo-cli -ghexo –version 使用hexo创建博客项目hexo init blogcd blognpm install 4.将写好的Markdown文件放到blog/source/——posts 5.生成静态html文件hexo generate / hexo g（清除之前生成的内容：hexo clean） 6.开启服务hexo server 如果希望将自己的博客部署到其他网站上托管，可以使用其他网站提供的pages服务，github和gitee都提供了pages服务 首先在github上创建一个名为xxx.github.io项目 其中xxx是自己的github用户名（必须完全一致） 修改blog目录下的_config.yml文件 在文件的最后添加下面的内容 DeploymentDocs: https://hexo.io/docs/deployment.htmldeploy:type: gitrepo: git@github.com:xxx/xxx.github.io.gitbranch: master 通过下面的命令可以实现一键部署hexo g -dhexo d -g 如果操作失败可能有两个原因： 没有安装git部署器（可以用npm进行安装）npm install hexo-deployer-git –save 需要配置SSH证书（可以通过openssl创建证书） 加密 - 通信安全 对称加密 - 加密和解密使用同一个密钥 - 著名的：AES attack at dawn - 明文 dwwdfn dw gdzq - 密文 非对称加密 - 加密和解密使用的是不同的密钥 - 著名的：RSA 生成密钥时需要生成两个密钥，一个叫公钥，一个叫私钥 Alice 向Bob发送数据时，使用公钥加密 Bob 收到Alice发过来的数据时，用私钥解密数据 Bob 向Alice发送数据时，使用私钥加密数据 Alice 收到Bob发过来的数据时，使用公钥解密数据 总结：公钥加密私钥解，私钥加密公钥解。","categories":[],"tags":[]},{"title":"","slug":"linux_note1","date":"2018-11-19T07:49:19.695Z","updated":"2018-11-19T06:23:41.068Z","comments":true,"path":"2018/11/19/linux_note1/","link":"","permalink":"http://yoursite.com/2018/11/19/linux_note1/","excerpt":"","text":"基础1.别名 alias：示例：alias rm=‘rm -f’ unalias：示例：unalias rm —移除rm=‘rm -f’ 回到最初rm，需再次别名成rm -i才能交互删除。ls：默认被别名成了ls –color=auto 2.压缩与解压缩 压缩：gzip 文件名xz -z 文件名 解压缩：gunzip 文件名xz -d 文件名 3. 归档和解归档 归档 tar -cvf 文件名 解归档 tar -xvf 文件名 4.组合命令 ;连接，表示不管第一句成功与否都执行后面 &amp;&amp;连接，表示第一句成功后才执行后面 ||连接，表示第一句失败了才执行后面 5. 管道 用|连接，表示前一条命令作为后一条命令的输入 6.重定向 :–&gt;: 表示覆盖重定向 :–&gt;&gt;: 表示追加重定向 :–2&gt;: 表示错误重定向示例：ls -R / &gt; ok.txt 2&gt; error.txt vim1.三种工作模式 命令模式（初始模式） ：set nu—–显示行号 100j—– 向下移动100行 20l—– 向右移动20列 G(大写G)—–代码来到末行 gg(小写g)—–代码来到首行 500G—–代码来到500行 删除 7dd—-删除从该行到后面7行 d$—–删除从光标到该行结尾 d0—–删除从行首到光标位置 dw—–删除一个单词 撤销 u —-撤销 复制 yy—- 复制一行 粘贴 p—-粘贴 编辑模式 末行模式 文件权限1. 参数介绍：-rw-r–r– 1 root root 第一个字符 l—连接 d—-文件夹 ‘-’—–文件 第2-4字符：文件的所有者对文件有何种操作权限 r - read - 读 w - write - 写 x - execute - 执行 第5-7字符：文件所有者同组的成员对文件有何种操作权限 第8-10字符：其他用户对文件有何种操作权限 第一个root：文件所有者 2. 权限修改 chmod u+(-)x(rw) 文件名 所有者可执行 chmod g+(-)x(rw) 文件名 所有者同组成员可执行 chmod o+(-)x(rw) 文件名 其他用户可执行 3. 改变文件所有者 chown 新的所有者 文件名——-改变文件所有者 4. 改变文件所属组 chgroup 新的组 文件名 —–改变文件所有者 python2代码转换成python3代码 2to3工具 示例：2to3 -w 文件名 还需要进文件改解释器 12#!/usr/bin/python# coding: utf-8 12#!/usr/bin/python3# coding: utf-8 文件比较 示例：vim -d 文件名1 文件名2 打开多个文件 示例：vim 文件1 文件2 :b 文件标号 切换文件 :sp 水平分屏 :vs 垂直分屏 快捷键 ctrl+e / ctrl+y 下移/上移一行 ctrl+f / ctrl+b 下移/上移一页 ctrl+r 重做 ctrl+w 按两下-切换窗口 末行模式 set nu—–显示行号 no nu—–取消行号 syntax on —–语法高亮 syntax off —–关闭语法高亮 sp —–水平拆分 vs —–垂直拆分 ls —–显示发开文件信息 b —–切换文件 w -write –保存 q -quit –退出 !—-强制执行 map —-映射命令模式下的快捷键 imap —-插入模式下的快捷键 inoremap—-插入模式下的快捷键，不递归 1,结束行s/要替代的内容/替代内容 ——查找替换 示例：1,$s/self/shit —-$文末 示例：1,$s/self/shit/c —–/c（confirm）每次需确认 示例：1,$s/self/shit/ci —–i（ignore）忽略大小写 设置vim配置文件 vim ~/.vimrc 作业30个人（15个教徒和15个非教徒）坐船出海，船坏了需要把15个人丢下海才能生存，规则：围成一圈从某人开始从1报数，报到9的人 丢到海里，下一个人继续从1开始报数，直到扔掉15人，结果15个教徒全部幸存，问最开始的站位 工资结算系统三种员工部门经理 15000/月程序员 200/小时销售员 1800底薪 + 5%销售额 linux 指令 tracepath - 查看经过的路由器 - tracepath www.baidu.com 结果多少个路由器才能到达百度 ifconfig - 检查网络接口（网络适配器） ip - 查看配置网络接口相关信息 netstat - 查看网络状态（端口占用、进程、已建立的连接） sftp - 安全网络文件传输 scp - 安全文件拷贝 示例：scp 文件 用户名@公网ip：/目录/文件名 命令 &amp; - 让命令在后台运行 jobs - 查看后台运行的进程 fg %编号 - 让命令回到前台运行 bg %编号 - 让命令在后台运行 ctrl+z - 将前台进程暂停放在后台 touch 文件名 文件存在，改变文件最后访问时间为当前时间 文件不存在， 创建文件 输入命令时带的参数，叫命令行参数 导入模块sys sys.argv可以获取命令行参数 sys.argv[0] 第一个参数（文件名） sys.argv[1…] 后续的参数，输入时以空格隔断","categories":[],"tags":[]}]}